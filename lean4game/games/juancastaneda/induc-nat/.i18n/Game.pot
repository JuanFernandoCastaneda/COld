msgid ""
msgstr "Project-Id-Version: Game v4.6.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: Mon Nov 25 16:12:00 2024\n"
"Last-Translator: \n"
"Language-Team: none\n"
"Language: en\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit"

#: Game.Levels.InduccionEstructNat.L1
msgid "Ejercicio 1"
msgstr ""

#: Game.Levels.InduccionEstructNat.L1
msgid "\n"
"Este mundo funciona como los otros; tienes que escribir en la barra de abajo en la mitad los teoremas que quieres ejecutar sobre el ejercicio (y luego dar enter para ejecutarlos).\n"
"\n"
"En la parte derecha encuentras los teoremas que puedes usar, discriminados según para qué tipo de operador lógico son. ES IMPORTANTE la dirección del teorema. Por ejemplo, si se escribe 'definicion_implicacion', el programa a buscar la primera ocurrencia de 'p → q' y la va a cambiar por '¬p ∨ q'. Si a cambio lo que se quiere es cambiar la ocurrencia de '¬p ∨ q' por 'p → q', se debe escribir '← definicion_implicacion'. El símbolo '←' se saca escribiendo '\l'.\n"
"\n"
"Para ejecutar algún teorema sobre una ocurrencia distinta a la primera se escribiría 'teorema; numero_de_ocurrencia'. Por ejemplo, para ejecutar la definición de la implicación en la segunda ocurrencia, se escribiría 'definicion_implicacion; 2'. Si tienes una expresión como '(p → q) → (p → r)' y le quisieras aplicar la definición de la implicación al '(p → r)', escribirías 'definicion_implicacion; 3', pues el primer '→' es el de la expresión general que conecta '(p → q)' con '(p → r)', el segundo sería el de '(p → q)' y finalmente el tercero sería el de '(p → r)'.\n"
"\n"
"Si llegas a ver una expresión como '¬p ∨ q ∧ r', no te asustes por el hecho de no tener paréntesis. Es un trabajo en progreso, pero por ahora deberías saber que tiene más precedencia el ∧ que el ∨. Entonces ese que acabamos de ver se interpretaría como '¬p ∨ (q ∧ r)'.\n"
"\n"
"Por último, otros comandos que pueden llegar a ser útiles son: '¬' = '\neg'; '∨' = '\or'; '∧' = '\and'; '→' = '\r' ; '↔' = '\lr'.\n"
""
msgstr ""

#: Game.Levels.InduccionEstructNat.L1
msgid "\n"
""
msgstr ""

#: Game.Levels.InduccionEstructNat.L1
msgid ""
msgstr ""

#: Game.Levels.InduccionEstructNat.L1
msgid ""
msgstr ""

#: Game.Levels.InduccionEstructNat.L1
msgid "El ∧ o "and" es el símbolo que representa la conjunción entre dos proposiciones.\n"
"\n"
"Su tabla de verdad dice que si se tiene el and entre dos proposiciones, siempre es falso a menos que ambas proposiciones sean verdaderas."
msgstr ""

#: Game.Levels.InduccionEstructNat.L2
msgid "Ejercicio 2"
msgstr ""

#: Game.Levels.InduccionEstructNat.L2
msgid "\n"
"Este mundo funciona como los otros; tienes que escribir en la barra de abajo en la mitad los teoremas que quieres ejecutar sobre el ejercicio (y luego dar enter para ejecutarlos).\n"
"\n"
"En la parte derecha encuentras los teoremas que puedes usar, discriminados según para qué tipo de operador lógico son. ES IMPORTANTE la dirección del teorema. Por ejemplo, si se escribe 'definicion_implicacion', el programa a buscar la primera ocurrencia de 'p → q' y la va a cambiar por '¬p ∨ q'. Si a cambio lo que se quiere es cambiar la ocurrencia de '¬p ∨ q' por 'p → q', se debe escribir '← definicion_implicacion'. El símbolo '←' se saca escribiendo '\l'.\n"
"\n"
"Para ejecutar algún teorema sobre una ocurrencia distinta a la primera se escribiría 'teorema; numero_de_ocurrencia'. Por ejemplo, para ejecutar la definición de la implicación en la segunda ocurrencia, se escribiría 'definicion_implicacion; 2'. Si tienes una expresión como '(p → q) → (p → r)' y le quisieras aplicar la definición de la implicación al '(p → r)', escribirías 'definicion_implicacion; 3', pues el primer '→' es el de la expresión general que conecta '(p → q)' con '(p → r)', el segundo sería el de '(p → q)' y finalmente el tercero sería el de '(p → r)'.\n"
"\n"
"Si llegas a ver una expresión como '¬p ∨ q ∧ r', no te asustes por el hecho de no tener paréntesis. Es un trabajo en progreso, pero por ahora deberías saber que tiene más precedencia el ∧ que el ∨. Entonces ese que acabamos de ver se interpretaría como '¬p ∨ (q ∧ r)'.\n"
"\n"
"Por último, otros comandos que pueden llegar a ser útiles son: '¬' = '\neg'; '∨' = '\or'; '∧' = '\and'; '→' = '\r' ; '↔' = '\lr'.\n"
""
msgstr ""

#: Game.Levels.InduccionEstructNat.L2
msgid "\n"
""
msgstr ""

#: Game.Levels.InduccionEstructNat.L2
msgid "El ∧ o "and" es el símbolo que representa la conjunción entre dos proposiciones.\n"
"\n"
"Su tabla de verdad dice que si se tiene el and entre dos proposiciones, siempre es falso a menos que ambas proposiciones sean verdaderas."
msgstr ""

#: Game.Levels.InduccionEstructNat.L3
msgid "Ejercicio 3"
msgstr ""

#: Game.Levels.InduccionEstructNat.L3
msgid "\n"
"Este mundo funciona como los otros; tienes que escribir en la barra de abajo en la mitad los teoremas que quieres ejecutar sobre el ejercicio (y luego dar enter para ejecutarlos).\n"
"\n"
"En la parte derecha encuentras los teoremas que puedes usar, discriminados según para qué tipo de operador lógico son. ES IMPORTANTE la dirección del teorema. Por ejemplo, si se escribe 'definicion_implicacion', el programa a buscar la primera ocurrencia de 'p → q' y la va a cambiar por '¬p ∨ q'. Si a cambio lo que se quiere es cambiar la ocurrencia de '¬p ∨ q' por 'p → q', se debe escribir '← definicion_implicacion'. El símbolo '←' se saca escribiendo '\l'.\n"
"\n"
"Para ejecutar algún teorema sobre una ocurrencia distinta a la primera se escribiría 'teorema; numero_de_ocurrencia'. Por ejemplo, para ejecutar la definición de la implicación en la segunda ocurrencia, se escribiría 'definicion_implicacion; 2'. Si tienes una expresión como '(p → q) → (p → r)' y le quisieras aplicar la definición de la implicación al '(p → r)', escribirías 'definicion_implicacion; 3', pues el primer '→' es el de la expresión general que conecta '(p → q)' con '(p → r)', el segundo sería el de '(p → q)' y finalmente el tercero sería el de '(p → r)'.\n"
"\n"
"Si llegas a ver una expresión como '¬p ∨ q ∧ r', no te asustes por el hecho de no tener paréntesis. Es un trabajo en progreso, pero por ahora deberías saber que tiene más precedencia el ∧ que el ∨. Entonces ese que acabamos de ver se interpretaría como '¬p ∨ (q ∧ r)'.\n"
"\n"
"Por último, otros comandos que pueden llegar a ser útiles son: '¬' = '\neg'; '∨' = '\or'; '∧' = '\and'; '→' = '\r' ; '↔' = '\lr'.\n"
""
msgstr ""

#: Game.Levels.InduccionEstructNat.L3
msgid "\n"
""
msgstr ""

#: Game.Levels.InduccionEstructNat.L3
msgid "El ∧ o "and" es el símbolo que representa la conjunción entre dos proposiciones.\n"
"\n"
"Su tabla de verdad dice que si se tiene el and entre dos proposiciones, siempre es falso a menos que ambas proposiciones sean verdaderas."
msgstr ""

#: Game.Levels.InduccionEstructNat.L4
msgid "Ejercicio 4"
msgstr ""

#: Game.Levels.InduccionEstructNat.L4
msgid "\n"
"Este mundo funciona como los otros; tienes que escribir en la barra de abajo en la mitad los teoremas que quieres ejecutar sobre el ejercicio (y luego dar enter para ejecutarlos).\n"
"\n"
"En la parte derecha encuentras los teoremas que puedes usar, discriminados según para qué tipo de operador lógico son. ES IMPORTANTE la dirección del teorema. Por ejemplo, si se escribe 'definicion_implicacion', el programa a buscar la primera ocurrencia de 'p → q' y la va a cambiar por '¬p ∨ q'. Si a cambio lo que se quiere es cambiar la ocurrencia de '¬p ∨ q' por 'p → q', se debe escribir '← definicion_implicacion'. El símbolo '←' se saca escribiendo '\l'.\n"
"\n"
"Para ejecutar algún teorema sobre una ocurrencia distinta a la primera se escribiría 'teorema; numero_de_ocurrencia'. Por ejemplo, para ejecutar la definición de la implicación en la segunda ocurrencia, se escribiría 'definicion_implicacion; 2'. Si tienes una expresión como '(p → q) → (p → r)' y le quisieras aplicar la definición de la implicación al '(p → r)', escribirías 'definicion_implicacion; 3', pues el primer '→' es el de la expresión general que conecta '(p → q)' con '(p → r)', el segundo sería el de '(p → q)' y finalmente el tercero sería el de '(p → r)'.\n"
"\n"
"Si llegas a ver una expresión como '¬p ∨ q ∧ r', no te asustes por el hecho de no tener paréntesis. Es un trabajo en progreso, pero por ahora deberías saber que tiene más precedencia el ∧ que el ∨. Entonces ese que acabamos de ver se interpretaría como '¬p ∨ (q ∧ r)'.\n"
"\n"
"Por último, otros comandos que pueden llegar a ser útiles son: '¬' = '\neg'; '∨' = '\or'; '∧' = '\and'; '→' = '\r' ; '↔' = '\lr'.\n"
""
msgstr ""

#: Game.Levels.InduccionEstructNat.L4
msgid "\n"
""
msgstr ""

#: Game.Levels.InduccionEstructNat.L4
msgid "El ∧ o "and" es el símbolo que representa la conjunción entre dos proposiciones.\n"
"\n"
"Su tabla de verdad dice que si se tiene el and entre dos proposiciones, siempre es falso a menos que ambas proposiciones sean verdaderas."
msgstr ""

#: Game.Levels.InduccionEstructNat
msgid "Inducción Estructural - Naturales"
msgstr ""

#: Game.Levels.InduccionEstructNat
msgid "\n"
"This introduction text is shown when one first enters a world.\n"
""
msgstr ""

#: Game
msgid "Inducción estructural Naturales"
msgstr ""

#: Game
msgid "\n"
"Este asistente te puede ayudar a resolver ejercicios de FMC por tu cuenta, sobre todo verificando que lo que estás haciendo está bien.\n"
"\n"
"En la mitad de la pantalla encontrarás "Mundos". Dale clic a las bolitas verdes que aparecen. Esas te llevarán a la introducción del mundo, y eventualmente a los ejercicios.\n"
"\n"
"El único mundo de este juego es el de Inducción Estructural sobre la construcción de Peano de los naturales.\n"
""
msgstr ""

#: Game
msgid "\n"
"\n"
""
msgstr ""
